# I have already installed terraform using chocolatey on the VMs, and configured the auto-complete option.
# I have a user group on AWS IAM that has the following permissions:
## AmazonVPCFullAccess
## AmazonEC2FullAccess
## AmazonS3FullAccess
## AmazonRDSFullAccess
## AmazonDynamoDBFullAccess
# I created a secret key from that account and used it to configure the AWS CLI on a VM (note: this will be deleted before the machine image is frozen.)

# Using the CLIs
## You will need to help them decide which shell they are going to use. Most of what we will do will be through the command line. I have been using Git Bash and PowerShell with no problems. 
## NOTE: Docker on the Windows Server 2019 version we have on the VMs is problematic 
- the VMs do not have Hyper-V capability, so Docker Desktop will not function, which means the only way to run Docker is with native windows containers. 
- I have tried to get full functionality for Docker on Windows using the steps in https://blog.sixeyed.com/getting-started-with-docker-on-windows-server-2019/
- It does mean Linux native containers like nginx will not work. I have replaced these with windows containers in the examples. 

# Webhook Demo
## This requires something setup on your VM to receive the Webhook POST request
- I followed the suggestions at https://docs.github.com/en/github-ae@latest/developers/webhooks-and-events/webhooks/creating-webhooks
- For the VMs I installed ngrok on Windows (https://ngrok.com/download), but found the Ruby install needed for Sinatra just wasn't sufficient on the Windows side, so I installed Ruby in the Ubuntu shell and it worked fine. There is a weird windows bug in the Ubuntu shell - the workaround fix was ``export TERM=xterm-color``. Apparently MS will release a proper fix soon.

# docker-compose installation
## This is required for one of the tutorials 
- web page https://docs.docker.com/compose/install/, look under Windows Server
- In a PowerShell running as Administrator: 
$ SecurityProtocol = [Net.SecurityProtocolType]::Tls12
$ Invoke-WebRequest "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-
Windows-x86_64.exe" -UseBasicParsing -OutFile $Env:ProgramFiles\Docker\docker-compose.exe
PS C:\Users\Administrator> docker-compose --version
- test installation:
$ docker-compose --version

# CDKTF installation (Not Used)
- This is a package to automatically transfer between other languages and HCL. 
- Installed for the JSON encoding demo
$ npm install --global cdktf-cli@latest

# Ansible installation (and AWS on the WSL)
- This is necessary for the Ansible tutorials
- It can only be installed on the WSL, so you have to use the Ubuntu shell
$sudo apt update; sudo apt install ansible
$sudo apt install python3-pip # need the pip package to install boto3
$sudo pip3 install boto boto3
$sudo apt install awscli
- create a user for Ansible:
$ useradd --create-home --shell /usr/bin/bash ansible
$ passwd ansible
- password for ansible is ***REMOVED***
- Note when you login to the ansible account, I have set the TERM environment variable to vt220 in the .bashrc file. This fixes a scroll bug - when you clear the screen the prompt disappears and you can't see anything you type. With the vt220 TERM all seems to function normally.
- Also seems like a good idea to add ansible to the sudoer group:
$ usermod -aG sudo ansible

# Ansible SSH key setup
- login as the ansible user
$ssh-keygen -t rsa -P ""
- Accept the defaults
- This generates an rsa key pair (id_rsa, id_rsa.pub) in the directory ~/.ssh









# TIDY UP
1. delete ~/.aws/credentials
2. delete ~/terraform
3. delete ~/terraform-3day
4  from the ubuntu shell: delete ~/.aws/credentials
